const e=new class{config={subscriptionKey:"",baseUrl:"https://atlas.microsoft.com"};configure(e){this.config.subscriptionKey=e}async createFirePerimeterGeofence(e,t){try{if(!this.config.subscriptionKey)throw new Error("Azure Maps subscription key not configured. Please configure in Settings.");const i={type:"FeatureCollection",features:[{type:"Feature",geometry:{type:"Polygon",coordinates:[this.generateCircleCoordinates(e,t)]},properties:{name:`Fire_Perimeter_${Date.now()}`,alertType:"fire_perimeter",priority:"critical"}}]},a=await fetch(`${this.config.baseUrl}/spatial/geofence/json?api-version=1.0&subscription-key=${this.config.subscriptionKey}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(!a.ok)throw new Error(`Geofence creation failed: ${a.status}`);return{id:(await a.json()).udid||`geofence_${Date.now()}`,name:`Fire Perimeter ${(new Date).toLocaleString()}`,geometry:i,alertType:"fire_perimeter",status:"active",priority:"critical",createdAt:(new Date).toISOString(),lastUpdate:(new Date).toISOString()}}catch(i){throw i}}async calculateOptimalEvacuationRoutes(e,t){try{if(!this.config.subscriptionKey)return this.getMockEvacuationRoutes(e,t);const i=[];for(const a of e){const e=t.filter(e=>e.capacity>0);for(const t of e.slice(0,3)){const e=await fetch(`${this.config.baseUrl}/route/directions/json?api-version=1.0&subscription-key=${this.config.subscriptionKey}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:`${a.latitude},${a.longitude}:${t.latitude},${t.longitude}`,routeType:"fastest",traffic:!0,travelMode:"car",computeBestOrder:!0,routeRepresentation:"polyline",computeTravelTimeFor:"all",vehicleHeading:0,report:"effectiveSettings",alternativeType:"anyRoute"})});if(e.ok){const n=(await e.json()).routes[0];i.push({id:`route_${a.latitude}_${a.longitude}_${t.latitude}_${t.longitude}`,startPoint:a,endPoint:t,waypoints:n.legs[0].points||[],distance:n.summary.lengthInMeters,duration:n.summary.travelTimeInSeconds,trafficDelay:n.summary.trafficDelayInSeconds||0,roadConditions:this.assessRoadConditions(n.summary.trafficDelayInSeconds),capacity:this.calculateEvacuationCapacity(n.summary.lengthInMeters),alternativeRoutes:[],safetyRating:this.calculateSafetyRating(n),lastUpdated:(new Date).toISOString()})}}}return i}catch(i){return[]}}async findNearbyEmergencyFacilities(e,t=5e4){try{if(!this.config.subscriptionKey)return this.getMockEmergencyFacilities(e);const i=[],a=["hospital","fire_station","police"];for(const n of a){const a=await fetch(`${this.config.baseUrl}/search/nearby/json?api-version=1.0&subscription-key=${this.config.subscriptionKey}&lat=${e.latitude}&lon=${e.longitude}&radius=${t}&categorySet=${this.getCategorySet(n)}&limit=20`);if(a.ok){const t=await a.json();for(const a of t.results||[])i.push({id:a.id||`facility_${Date.now()}_${Math.random()}`,name:a.poi?.name||`${n} facility`,type:n,location:{latitude:a.position?.lat||e.latitude,longitude:a.position?.lon||e.longitude},capacity:this.estimateCapacity(n),currentOccupancy:Math.floor(Math.random()*this.estimateCapacity(n)),services:this.getServices(n),contactInfo:{phone:a.poi?.phone||"N/A",radio:`CH_${Math.floor(20*Math.random())+1}`,email:`${a.poi?.name?.toLowerCase().replace(/\s+/g,"")||"emergency"}@emergency.gov`},status:"operational",resources:this.getResources(n)})}}return i}catch(i){return[]}}async analyzeTrafficForEvacuation(e){try{if(!this.config.subscriptionKey)return this.getMockTrafficAnalysis(e);const t=[],i=[];for(const a of e){const e=await fetch(`${this.config.baseUrl}/traffic/flow/segment/json?api-version=1.0&subscription-key=${this.config.subscriptionKey}&query=${a.startPoint.latitude},${a.startPoint.longitude}&style=absolute&zoom=10`);if(e.ok){const n=await e.json();t.push({id:a.id,name:`Route to ${a.endPoint.latitude},${a.endPoint.longitude}`,coordinates:a.waypoints,currentSpeed:n.flowSegmentData?.currentSpeed||50,freeFlowSpeed:n.flowSegmentData?.freeFlowSpeed||80,congestionLevel:this.calculateCongestionLevel(n.flowSegmentData?.currentSpeed||50,n.flowSegmentData?.freeFlowSpeed||80),incidents:[],evacuationCapacity:this.calculateEvacuationCapacity(a.distance)}),n.flowSegmentData?.currentSpeed<.5*n.flowSegmentData?.freeFlowSpeed&&i.push({location:a.startPoint,severity:8,cause:"Heavy traffic congestion",recommendation:"Consider alternative route or staggered evacuation"})}}return{roadSegments:t,alternativeRoutes:e,estimatedEvacuationTime:this.calculateTotalEvacuationTime(t),bottlenecks:i}}catch(t){return{roadSegments:[],alternativeRoutes:[],estimatedEvacuationTime:0,bottlenecks:[]}}}async optimizeResourceDeployment(e,t,i){try{const a=i.filter(e=>"fire_station"===e.type),n=[];if(!this.config.subscriptionKey)return this.getMockResourceOptimization(e,t,a);for(const i of a){const a=await fetch(`${this.config.baseUrl}/route/directions/json?api-version=1.0&subscription-key=${this.config.subscriptionKey}&query=${i.location.latitude},${i.location.longitude}:${e.latitude},${e.longitude}&routeType=fastest&traffic=true`);if(a.ok){const o=(await a.json()).routes[0],r=o.summary.travelTimeInSeconds/60;({id:i.id,location:i.location,responseTime:r,resources:i.resources,personnel:{total:25,available:20,specialized:[{skill:"Hazmat",count:3},{skill:"Rescue",count:5},{skill:"Medical",count:4}]},deploymentRecommendation:{priority:this.calculateDeploymentPriority(r,t),assignment:this.getOptimalAssignment(t),estimatedArrival:new Date(Date.now()+60*r*1e3).toISOString()}}).deploymentRecommendation.priority>=7&&n.push({stationId:i.id,resources:this.selectOptimalResources(t),targetLocation:e,route:{id:`deployment_${i.id}`,startPoint:i.location,endPoint:e,waypoints:o.legs[0].points||[],distance:o.summary.lengthInMeters,duration:o.summary.travelTimeInSeconds,trafficDelay:o.summary.trafficDelayInSeconds||0,roadConditions:"clear",capacity:1,alternativeRoutes:[],safetyRating:9,lastUpdated:(new Date).toISOString()},missionType:this.getMissionType(t)})}}return{fireStations:a.map(e=>({id:e.id,location:e.location,responseTime:15,resources:e.resources.map(e=>({type:this.mapResourceType(e.type),count:e.quantity,available:e.available})),personnel:{total:25,available:20,specialized:[{skill:"Hazmat",count:3},{skill:"Rescue",count:5},{skill:"Medical",count:4}]},deploymentRecommendation:{priority:8,assignment:"Fire suppression",estimatedArrival:new Date(Date.now()+9e5).toISOString()}})),optimalDeployment:n}}catch(a){return{fireStations:[],optimalDeployment:[]}}}async getRealTimeMonitoring(){return{activeIncidents:[{id:"INC_001",type:"fire",location:{latitude:40.4168,longitude:-3.7038},severity:"high",status:"on_scene",assignedResources:["ENGINE_01","LADDER_02","RESCUE_01"],estimatedResolution:new Date(Date.now()+72e5).toISOString(),updates:[{timestamp:(new Date).toISOString(),message:"Fire contained to 50% perimeter",source:"INCIDENT_COMMANDER"}]}],assetTracking:[{id:"ENGINE_01",type:"fire_truck",location:{latitude:40.42,longitude:-3.71},status:"on_scene",speed:0,heading:180,fuel:75,crew:[{name:"Captain Rodriguez",role:"Captain",status:"active"},{name:"FF Martinez",role:"Engineer",status:"active"},{name:"FF Garcia",role:"Firefighter",status:"active"}],lastUpdate:(new Date).toISOString()}]}}async analyzeWeatherImpact(e){try{if(!this.config.subscriptionKey)return this.getDefaultWeatherImpact();const t=await fetch(`${this.config.baseUrl}/weather/currentConditions/json?api-version=1.0&subscription-key=${this.config.subscriptionKey}&query=${e.latitude},${e.longitude}&details=true`);if(!t.ok)throw new Error("Weather data unavailable");const i=(await t.json()).results[0],a=await fetch(`${this.config.baseUrl}/weather/forecast/hourly/json?api-version=1.0&subscription-key=${this.config.subscriptionKey}&query=${e.latitude},${e.longitude}&duration=24`),n=a.ok?await a.json():{forecasts:[]};return{windImpact:{currentDirection:i.wind.direction.degrees,currentSpeed:i.wind.speed.value,forecast:n.forecasts.slice(0,12).map(e=>({time:e.date,direction:e.wind.direction.degrees,speed:e.wind.speed.value,gusts:e.windGust?.speed?.value||1.3*e.wind.speed.value,impact:this.calculateWindImpact(e.wind.speed.value)})),fireSpreadPrediction:this.calculateFireSpreadPrediction(i.wind)},precipitationImpact:{current:i.precipitationSummary?.pastHour?.value||0,forecast:n.forecasts.slice(0,12).map(e=>({time:e.date,intensity:e.totalLiquid?.value||0,probability:e.precipitationProbability,type:e.hasPrecipitation?"rain":"none"})),fireSuppressionBenefit:this.calculateSuppressionBenefit(i.precipitationSummary?.pastHour?.value||0)},visibilityConditions:{current:i.visibility.value,forecast:n.forecasts.slice(0,12).map(e=>({time:e.date,visibility:e.visibility?.value||10,factors:this.identifyVisibilityFactors(e)})),aerialOperationsImpact:this.assessAerialOperations(i.visibility.value,i.wind.speed.value)}}}catch(t){return this.getDefaultWeatherImpact()}}async calculateEvacuationIsochrones(e,t=[15,30,60]){try{if(!this.config.subscriptionKey)return this.getMockIsochrones(e,t);const i=[];for(const a of t){const t=await fetch(`${this.config.baseUrl}/route/range/json?api-version=1.0&subscription-key=${this.config.subscriptionKey}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:`${e.latitude},${e.longitude}`,timeBudgetInSec:60*a,routeType:"fastest",travelMode:"car",traffic:!0})});if(t.ok){const e=await t.json();i.push({timeMinutes:a,polygon:e.reachableRange,population:this.estimatePopulationInArea(e.reachableRange),criticalFacilities:await this.findFacilitiesInArea(e.reachableRange)})}}return i}catch(i){return[]}}getMockEvacuationRoutes(e,t){return e.slice(0,3).map((e,i)=>({id:`mock_route_${i}`,startPoint:e,endPoint:t[0]||{latitude:e.latitude+.01,longitude:e.longitude+.01},waypoints:[],distance:5e3+1e4*Math.random(),duration:600+1200*Math.random(),trafficDelay:300*Math.random(),roadConditions:"clear",capacity:1e3,alternativeRoutes:[],safetyRating:8,lastUpdated:(new Date).toISOString()}))}getMockEmergencyFacilities(e){return[{id:"mock_hospital_1",name:"Emergency Hospital",type:"hospital",location:{latitude:e.latitude+.01,longitude:e.longitude+.01},capacity:200,currentOccupancy:150,services:["Emergency Care","Surgery","ICU"],contactInfo:{phone:"112",radio:"CH_1",email:"hospital@emergency.gov"},status:"operational",resources:[{type:"Beds",quantity:200,available:50}]}]}getMockTrafficAnalysis(e){return{roadSegments:e.map(e=>({id:e.id,name:`Mock Route ${e.id}`,coordinates:e.waypoints,currentSpeed:50,freeFlowSpeed:80,congestionLevel:"light",incidents:[],evacuationCapacity:1e3})),alternativeRoutes:e,estimatedEvacuationTime:45,bottlenecks:[]}}getMockResourceOptimization(e,t,i){return{fireStations:i.map(e=>({id:e.id,location:e.location,responseTime:15,resources:e.resources.map(e=>({type:this.mapResourceType(e.type),count:e.quantity,available:e.available})),personnel:{total:25,available:20,specialized:[]},deploymentRecommendation:{priority:8,assignment:"Fire suppression",estimatedArrival:new Date(Date.now()+9e5).toISOString()}})),optimalDeployment:[]}}getMockIsochrones(e,t){return t.map(e=>({timeMinutes:e,polygon:{type:"Polygon",coordinates:[]},population:100*e,criticalFacilities:[]}))}generateCircleCoordinates(e,t){const i=[];for(let a=0;a<=32;a++){const n=a/32*2*Math.PI,o=e.latitude+t/111320*Math.cos(n),r=e.longitude+t/(111320*Math.cos(e.latitude*Math.PI/180))*Math.sin(n);i.push([r,o])}return i}assessRoadConditions(e){return e>1800?"blocked":e>600?"congested":"clear"}calculateEvacuationCapacity(e){return Math.max(100,3e3-e/1e3*50)}calculateSafetyRating(e){return Math.floor(3*Math.random())+7}getCategorySet(e){return{hospital:"7321",fire_station:"7322",police:"7322"}[e]||"7321"}estimateCapacity(e){return{hospital:200,fire_station:50,police:30,shelter:500}[e]||100}getServices(e){return{hospital:["Emergency Care","Surgery","ICU","Trauma Center"],fire_station:["Fire Suppression","Rescue","Hazmat","Medical"],police:["Law Enforcement","Traffic Control","Evacuation Support"],shelter:["Temporary Housing","Food Service","Medical Care"]}[e]||[]}getResources(e){return{hospital:[{type:"Beds",quantity:200,available:150},{type:"Ventilators",quantity:20,available:15},{type:"Ambulances",quantity:8,available:6}],fire_station:[{type:"Fire Engines",quantity:4,available:3},{type:"Ladder Trucks",quantity:2,available:2},{type:"Rescue Vehicles",quantity:2,available:1}],police:[{type:"Patrol Cars",quantity:10,available:8},{type:"Motorcycles",quantity:4,available:3}]}[e]||[]}calculateCongestionLevel(e,t){const i=e/t;return i>.8?"free":i>.6?"light":i>.4?"moderate":i>.2?"heavy":"blocked"}calculateTotalEvacuationTime(e){return Math.max(...e.map(e=>e.distance/1e3/(e.currentSpeed||30)*60))}calculateDeploymentPriority(e,t){let i=10-Math.floor(e/5);return Math.max(1,Math.min(10,i*{low:.5,medium:.7,high:.9,extreme:1}[t]))}getOptimalAssignment(e){return{low:"Perimeter control and monitoring",medium:"Direct attack with ground crews",high:"Coordinated air and ground attack",extreme:"Defensive operations and evacuation support"}[e]}selectOptimalResources(e){return{low:["Engine","Water Tender"],medium:["Engine","Ladder","Water Tender"],high:["Engine","Ladder","Water Tender","Rescue","Command"],extreme:["Engine","Ladder","Water Tender","Rescue","Command","Hazmat"]}[e]}getMissionType(e){return{low:"prevention",medium:"suppression",high:"suppression",extreme:"evacuation"}[e]}calculateWindImpact(e){return e>30?"extreme":e>20?"high":e>10?"moderate":"low"}calculateFireSpreadPrediction(e){const t=[],i=.1*e.speed.value;for(let a=1;a<=12;a++){const n=new Date(Date.now()+60*a*60*1e3).toISOString(),o=2+i,r=Math.PI*Math.pow(o*a*60,2)/1e4;t.push({time:n,direction:e.direction.degrees,speed:o,area:r})}return t}calculateSuppressionBenefit(e){return e>10?10:e>5?8:e>1?5:1}identifyVisibilityFactors(e){const t=[];return e.cloudCover>80&&t.push("clouds"),e.hasPrecipitation&&t.push("precipitation"),t}assessAerialOperations(e,t){return e<1||t>25?"grounded":e<3||t>15?"limited":"safe"}mapResourceType(e){return{"Fire Engines":"engine","Ladder Trucks":"ladder","Rescue Vehicles":"rescue",Hazmat:"hazmat",Command:"command"}[e]||"engine"}getDefaultWeatherImpact(){return{windImpact:{currentDirection:180,currentSpeed:10,forecast:[],fireSpreadPrediction:[]},precipitationImpact:{current:0,forecast:[],fireSuppressionBenefit:1},visibilityConditions:{current:10,forecast:[],aerialOperationsImpact:"safe"}}}estimatePopulationInArea(e){return Math.floor(1e4*Math.random())+1e3}async findFacilitiesInArea(e){return[]}getServiceStatus(){return{configured:!!this.config.subscriptionKey,capabilities:["Fire Perimeter Geofencing","Evacuation Route Optimization","Emergency Facility Management","Real-time Traffic Analysis","Resource Deployment Optimization","Asset Tracking & Monitoring","Weather Impact Analysis","Isochrone Analysis","Spatial Analytics","Professional Routing"],lastUpdate:(new Date).toISOString()}}};export{e as a};
